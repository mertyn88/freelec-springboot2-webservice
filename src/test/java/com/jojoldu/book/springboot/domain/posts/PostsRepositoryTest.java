package com.jojoldu.book.springboot.domain.posts;

import org.junit.After;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;


/*
    @After
        JUnit에서 단위 테스트가 끝날 때마다 수행되는 메소드를 지정
        보통은 배포 전 전체 테스트를 수행할 때 테스트간 데이터 침범을 막기 위해 사용
        여러 테스트가 동시에 수행되면 테스트용 데이터베이스인 H2에 데이터가 그대로 남아 다음 테스트에 영향을 미치므로 삭제

    postsRepository.save
        테이블 post에 insert/update 쿼리를 실행한다.
        id값이 있다면 update가, 없다면 insert쿼리가 실행된다.

    postsRepository.findAll
        테이블 posts에 있는 모든 데이터를 조회해오는 메소드


    해당 테스트 수행 JPA

    1. Hibernate: drop table posts if exists
    2. Hibernate: create table posts (id bigint generated by default as identity, author varchar(255), content TEXT not null, title varchar(500) not null, primary key (id))
    3. Hibernate: insert into posts (id, author, content, title) values (null, ?, ?, ?)
    4. Hibernate: select posts0_.id as id1_0_, posts0_.author as author2_0_, posts0_.content as content3_0_, posts0_.title as title4_0_ from posts posts0_
    5. Hibernate: delete from posts where id=?
    6. Hibernate: drop table posts if exists
 */

@RunWith(SpringRunner.class)
@SpringBootTest
public class PostsRepositoryTest {

    @Autowired
    PostsRepository postsRepository;

    @After
    public void cleanup(){
        postsRepository.deleteAll();
    }

    @Test
    public void 게시글저장_불러오기(){
        //given
        String title = "테스트 게시글";
        String content = "테스트 본문";

        //기본생성자가 아닌 빌더를 통해서 만들었으므로 Posts클래스에서 각각 title,content,author를 명시하였다.
        postsRepository.save(
                            Posts.builder()
                            .title(title)
                            .content(content)
                            .author("mertyn88@gmail.com")
                            .build()
                            );

        //when
        List<Posts> postsList = postsRepository.findAll();

        //then
        Posts posts = postsList.get(0);
        assertThat(posts.getTitle()).isEqualTo(title);
        assertThat(posts.getContent()).isEqualTo(content);
    }
}
